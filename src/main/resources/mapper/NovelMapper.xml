<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.yushan.backend.dao.NovelMapper" >
  <resultMap id="BaseResultMap" type="com.yushan.backend.entity.Novel" >
    <constructor >
      <idArg column="id" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="uuid" jdbcType="OTHER" javaType="java.util.UUID" />
      <arg column="title" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="author_id" jdbcType="OTHER" javaType="java.util.UUID" />
      <arg column="author_name" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="category_id" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="synopsis" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="cover_img_url" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="status" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="is_completed" jdbcType="BOOLEAN" javaType="java.lang.Boolean" />
      <arg column="chapter_cnt" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="word_cnt" jdbcType="BIGINT" javaType="java.lang.Long" />
      <arg column="avg_rating" jdbcType="REAL" javaType="java.lang.Float" />
      <arg column="review_cnt" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="view_cnt" jdbcType="BIGINT" javaType="java.lang.Long" />
      <arg column="vote_cnt" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="yuan_cnt" jdbcType="REAL" javaType="java.lang.Float" />
      <arg column="create_time" jdbcType="TIMESTAMP" javaType="java.util.Date" />
      <arg column="update_time" jdbcType="TIMESTAMP" javaType="java.util.Date" />
      <arg column="publish_time" jdbcType="TIMESTAMP" javaType="java.util.Date" />
    </constructor>
  </resultMap>
  <sql id="Base_Column_List" >
    id, uuid, title, author_id, author_name, category_id, synopsis, cover_img_url, status, 
    is_completed, chapter_cnt, word_cnt, avg_rating, review_cnt, view_cnt,
    vote_cnt, yuan_cnt, create_time, update_time, publish_time
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from novel
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from novel
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.yushan.backend.entity.Novel" useGeneratedKeys="true" keyProperty="id">
    insert into novel (id, uuid, title, 
      author_id, author_name, category_id, 
      synopsis, cover_img_url, status, 
      is_completed, chapter_cnt,
      word_cnt, avg_rating, review_cnt, 
      view_cnt, vote_cnt, yuan_cnt, 
      create_time, update_time, publish_time
      )
    values (#{id,jdbcType=INTEGER}, #{uuid,jdbcType=OTHER}, #{title,jdbcType=VARCHAR}, 
      #{authorId,jdbcType=OTHER}, #{authorName,jdbcType=VARCHAR}, #{categoryId,jdbcType=INTEGER}, 
      #{synopsis,jdbcType=VARCHAR}, #{coverImgUrl,jdbcType=VARCHAR}, #{status,jdbcType=INTEGER}, 
      #{isCompleted,jdbcType=BOOLEAN}, #{chapterCnt,jdbcType=INTEGER},
      #{wordCnt,jdbcType=BIGINT}, #{avgRating,jdbcType=REAL}, #{reviewCnt,jdbcType=INTEGER}, 
      #{viewCnt,jdbcType=BIGINT}, #{voteCnt,jdbcType=INTEGER}, #{yuanCnt,jdbcType=REAL}, 
      #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP}, #{publishTime,jdbcType=TIMESTAMP}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.yushan.backend.entity.Novel" useGeneratedKeys="true" keyProperty="id">
    insert into novel
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="uuid != null" >
        uuid,
      </if>
      <if test="title != null" >
        title,
      </if>
      <if test="authorId != null" >
        author_id,
      </if>
      <if test="authorName != null" >
        author_name,
      </if>
      <if test="categoryId != null" >
        category_id,
      </if>
      <if test="synopsis != null" >
        synopsis,
      </if>
      <if test="coverImgUrl != null" >
        cover_img_url,
      </if>
      <if test="status != null" >
        status,
      </if>
      <if test="isCompleted != null" >
        is_completed,
      </if>
      <if test="chapterCnt != null" >
        chapter_cnt,
      </if>
      <if test="wordCnt != null" >
        word_cnt,
      </if>
      <if test="avgRating != null" >
        avg_rating,
      </if>
      <if test="reviewCnt != null" >
        review_cnt,
      </if>
      <if test="viewCnt != null" >
        view_cnt,
      </if>
      <if test="voteCnt != null" >
        vote_cnt,
      </if>
      <if test="yuanCnt != null" >
        yuan_cnt,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
      <if test="updateTime != null" >
        update_time,
      </if>
      <if test="publishTime != null" >
        publish_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="uuid != null" >
        #{uuid,jdbcType=OTHER},
      </if>
      <if test="title != null" >
        #{title,jdbcType=VARCHAR},
      </if>
      <if test="authorId != null" >
        #{authorId,jdbcType=OTHER},
      </if>
      <if test="authorName != null" >
        #{authorName,jdbcType=VARCHAR},
      </if>
      <if test="categoryId != null" >
        #{categoryId,jdbcType=INTEGER},
      </if>
      <if test="synopsis != null" >
        #{synopsis,jdbcType=VARCHAR},
      </if>
      <if test="coverImgUrl != null" >
        #{coverImgUrl,jdbcType=VARCHAR},
      </if>
      <if test="status != null" >
        #{status,jdbcType=INTEGER},
      </if>
      <if test="isCompleted != null" >
        #{isCompleted,jdbcType=BOOLEAN},
      </if>
      <if test="chapterCnt != null" >
        #{chapterCnt,jdbcType=INTEGER},
      </if>
      <if test="wordCnt != null" >
        #{wordCnt,jdbcType=BIGINT},
      </if>
      <if test="avgRating != null" >
        #{avgRating,jdbcType=REAL},
      </if>
      <if test="reviewCnt != null" >
        #{reviewCnt,jdbcType=INTEGER},
      </if>
      <if test="viewCnt != null" >
        #{viewCnt,jdbcType=BIGINT},
      </if>
      <if test="voteCnt != null" >
        #{voteCnt,jdbcType=INTEGER},
      </if>
      <if test="yuanCnt != null" >
        #{yuanCnt,jdbcType=REAL},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null" >
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="publishTime != null" >
        #{publishTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.yushan.backend.entity.Novel" >
    update novel
    <set >
      <if test="uuid != null" >
        uuid = #{uuid,jdbcType=OTHER},
      </if>
      <if test="title != null" >
        title = #{title,jdbcType=VARCHAR},
      </if>
      <if test="authorId != null" >
        author_id = #{authorId,jdbcType=OTHER},
      </if>
      <if test="authorName != null" >
        author_name = #{authorName,jdbcType=VARCHAR},
      </if>
      <if test="categoryId != null" >
        category_id = #{categoryId,jdbcType=INTEGER},
      </if>
      <if test="synopsis != null" >
        synopsis = #{synopsis,jdbcType=VARCHAR},
      </if>
      <if test="coverImgUrl != null" >
        cover_img_url = #{coverImgUrl,jdbcType=VARCHAR},
      </if>
      <if test="status != null" >
        status = #{status,jdbcType=INTEGER},
      </if>
      <if test="isCompleted != null" >
        is_completed = #{isCompleted,jdbcType=BOOLEAN},
      </if>
      <if test="chapterCnt != null" >
        chapter_cnt = #{chapterCnt,jdbcType=INTEGER},
      </if>
      <if test="wordCnt != null" >
        word_cnt = #{wordCnt,jdbcType=BIGINT},
      </if>
      <if test="avgRating != null" >
        avg_rating = #{avgRating,jdbcType=REAL},
      </if>
      <if test="reviewCnt != null" >
        review_cnt = #{reviewCnt,jdbcType=INTEGER},
      </if>
      <if test="viewCnt != null" >
        view_cnt = #{viewCnt,jdbcType=BIGINT},
      </if>
      <if test="voteCnt != null" >
        vote_cnt = #{voteCnt,jdbcType=INTEGER},
      </if>
      <if test="yuanCnt != null" >
        yuan_cnt = #{yuanCnt,jdbcType=REAL},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null" >
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="publishTime != null" >
        publish_time = #{publishTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.yushan.backend.entity.Novel" >
    update novel
    set uuid = #{uuid,jdbcType=OTHER},
      title = #{title,jdbcType=VARCHAR},
      author_id = #{authorId,jdbcType=OTHER},
      author_name = #{authorName,jdbcType=VARCHAR},
      category_id = #{categoryId,jdbcType=INTEGER},
      synopsis = #{synopsis,jdbcType=VARCHAR},
      cover_img_url = #{coverImgUrl,jdbcType=VARCHAR},
      status = #{status,jdbcType=INTEGER},
      is_completed = #{isCompleted,jdbcType=BOOLEAN},
      chapter_cnt = #{chapterCnt,jdbcType=INTEGER},
      word_cnt = #{wordCnt,jdbcType=BIGINT},
      avg_rating = #{avgRating,jdbcType=REAL},
      review_cnt = #{reviewCnt,jdbcType=INTEGER},
      view_cnt = #{viewCnt,jdbcType=BIGINT},
      vote_cnt = #{voteCnt,jdbcType=INTEGER},
      yuan_cnt = #{yuanCnt,jdbcType=REAL},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      publish_time = #{publishTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>

  <!-- Common WHERE clause for filtering -->
  <sql id="Novel_Where">
    <where>
      status != 4  <!-- Exclude ARCHIVED novels (NovelStatus.ARCHIVED = 4) -->
      <if test="req.categoryId != null and req.categoryId > 0">
        and category_id = #{req.categoryId,jdbcType=INTEGER}
      </if>
            <if test="req.status != null and req.status != ''">
              <choose>
                <when test="req.status == 'DRAFT'">
                  and status = 0
                </when>
                <when test="req.status == 'UNDER_REVIEW'">
                  and status = 1
                </when>
                <when test="req.status == 'PUBLISHED'">
                  and status = 2
                </when>
                <when test="req.status == 'HIDDEN'">
                  and status = 3
                </when>
                <when test="req.status == 'ARCHIVED'">
                  and status = 4
                </when>
              </choose>
            </if>
      <if test="req.search != null and req.search != ''">
        <bind name="searchPattern" value="'%' + req.search + '%'" />
        and (title ILIKE #{searchPattern} or synopsis ILIKE #{searchPattern})
      </if>
      <if test="req.authorName != null and req.authorName != ''">
        and author_name ILIKE CONCAT('%', #{req.authorName}, '%')
      </if>
    </where>
  </sql>

  <!-- Public WHERE clause - excludes ARCHIVED novels -->
  <sql id="Novel_Public_Where">
    <where>
      status != 4  <!-- Exclude ARCHIVED novels (NovelStatus.ARCHIVED = 4) -->
      <if test="req.categoryId != null and req.categoryId > 0">
        and category_id = #{req.categoryId,jdbcType=INTEGER}
      </if>
      <if test="req.status != null and req.status != ''">
        <choose>
          <when test="req.status == 'DRAFT'">
            and status = 0
          </when>
          <when test="req.status == 'UNDER_REVIEW'">
            and status = 1
          </when>
          <when test="req.status == 'PUBLISHED'">
            and status = 2
          </when>
          <when test="req.status == 'HIDDEN'">
            and status = 3
          </when>
        </choose>
      </if>
      <if test="req.search != null and req.search != ''">
        <bind name="searchPattern" value="'%' + req.search + '%'" />
        and (title ILIKE #{searchPattern} or synopsis ILIKE #{searchPattern})
      </if>
      <if test="req.authorName != null and req.authorName != ''">
        and author_name ILIKE CONCAT('%', #{req.authorName}, '%')
      </if>
        <if test="req.authorId != null and req.authorId != ''">
          and author_id = #{req.authorId,jdbcType=OTHER}::uuid
        </if>
    </where>
  </sql>

  <!-- Common ORDER BY clause -->
  <sql id="Novel_Order_By">
    <choose>
      <when test="req.sort == 'title'">
        <choose>
          <when test="req.order == 'asc'">
            order by title asc
          </when>
          <otherwise>
            order by title desc
          </otherwise>
        </choose>
      </when>
      <when test="req.sort == 'updateTime'">
        <choose>
          <when test="req.order == 'asc'">
            order by update_time asc
          </when>
          <otherwise>
            order by update_time desc
          </otherwise>
        </choose>
      </when>
      <when test="req.sort == 'viewCnt'">
        <choose>
          <when test="req.order == 'asc'">
            order by view_cnt asc
          </when>
          <otherwise>
            order by view_cnt desc
          </otherwise>
        </choose>
      </when>
      <when test="req.sort == 'avgRating'">
        <choose>
          <when test="req.order == 'asc'">
            order by avg_rating asc
          </when>
          <otherwise>
            order by avg_rating desc
          </otherwise>
        </choose>
      </when>
      <otherwise>
        <choose>
          <when test="req.order == 'asc'">
            order by create_time asc
          </when>
          <otherwise>
            order by create_time desc
          </otherwise>
        </choose>
      </otherwise>
    </choose>
  </sql>

  <!-- Pagination and filtering queries -->
  <select id="selectNovelsWithPagination" resultMap="BaseResultMap" parameterType="com.yushan.backend.dto.NovelSearchRequestDTO">
    <bind name="page" value="req.page != null ? req.page : 0" />
    <bind name="size" value="req.size != null ? req.size : 10" />
    <bind name="offset" value="page * size" />
    select 
    <include refid="Base_Column_List" />
    from novel
    <include refid="Novel_Public_Where" />
    <include refid="Novel_Order_By" />
    limit #{size,jdbcType=INTEGER} offset #{offset}
  </select>

  <select id="countNovels" resultType="long" parameterType="com.yushan.backend.dto.NovelSearchRequestDTO">
    select count(*)
    from novel
    <include refid="Novel_Public_Where" />
  </select>

  <!-- Admin queries - including ARCHIVED novels -->
  <select id="selectAllNovelsWithPagination" resultMap="BaseResultMap" parameterType="com.yushan.backend.dto.NovelSearchRequestDTO">
    <bind name="page" value="req.page != null ? req.page : 0" />
    <bind name="size" value="req.size != null ? req.size : 10" />
    <bind name="offset" value="page * size" />
    select 
    <include refid="Base_Column_List" />
    from novel
    <include refid="Novel_Where" />
    <include refid="Novel_Order_By" />
    limit #{size,jdbcType=INTEGER} offset #{offset}
  </select>

  <select id="countAllNovels" resultType="long" parameterType="com.yushan.backend.dto.NovelSearchRequestDTO">
    select count(*)
    from novel
    <include refid="Novel_Where" />
  </select>

  <update id="incrementVoteCount">
    update novel
    set vote_cnt = vote_cnt + 1,
        update_time = CURRENT_TIMESTAMP
    where id = #{novelId,jdbcType=INTEGER}
  </update>

  <update id="decrementVoteCount">
    update novel
    set vote_cnt = vote_cnt - 1,
        update_time = CURRENT_TIMESTAMP
    where id = #{novelId,jdbcType=INTEGER}
  </update>

  <update id="incrementViewCount">
    update novel
    set view_cnt = view_cnt + 1,
        update_time = CURRENT_TIMESTAMP
    where id = #{novelId,jdbcType=INTEGER}
  </update>

    <select id="selectNovelsByRanking" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List" />
        FROM novel
        <where>
            status = 2  <!-- Include only PUBLISHED novels (NovelStatus.PUBLISHED = 2) -->
            <if test="categoryId != null and categoryId > 0">
                AND category_id = #{categoryId,jdbcType=INTEGER}
            </if>
        </where>
        <choose>
            <when test="sortType == 'view'">
                ORDER BY view_cnt DESC
            </when>
            <when test="sortType == 'vote'">
                ORDER BY vote_cnt DESC
            </when>
            <otherwise>
                ORDER BY view_cnt DESC
            </otherwise>
        </choose>
        LIMIT #{limit} OFFSET #{offset}
    </select>

    <select id="countNovelsByRanking" resultType="long">
        SELECT COUNT(*)
        FROM novel
        <where>
            status = 2  <!-- Exclude ARCHIVED novels (NovelStatus.ARCHIVED = 4) -->
            <if test="categoryId != null and categoryId > 0">
                AND category_id = #{categoryId,jdbcType=INTEGER}
            </if>
        </where>
    </select>

    <select id="selectAuthorsByRanking" resultType="com.yushan.backend.dto.AuthorResponseDTO">
        SELECT
        u.uuid as uuid,
        u.username as username,
        u.avatar_url as avatarUrl,
        COUNT(n.id) as novelNum,
        COALESCE(SUM(n.vote_cnt), 0) as totalVoteCnt,
        COALESCE(SUM(n.view_cnt), 0) as totalViewCnt
        FROM users u
        LEFT JOIN novel n ON u.uuid = n.author_id AND n.status = 2
        WHERE u.is_author = true
        GROUP BY u.uuid, u.username, u.avatar_url
        <choose>
            <when test="sortType == 'novelNum'">
                ORDER BY novelNum DESC, totalVoteCnt DESC, totalViewCnt DESC
            </when>
            <when test="sortType == 'vote'">
                ORDER BY totalVoteCnt DESC, novelNum DESC, totalViewCnt DESC
            </when>
            <when test="sortType == 'view'">
                ORDER BY totalViewCnt DESC, novelNum DESC, totalVoteCnt DESC
            </when>
            <otherwise>
                ORDER BY novelNum DESC, totalVoteCnt DESC, totalViewCnt DESC
            </otherwise>
        </choose>
        LIMIT #{limit} OFFSET #{offset}
    </select>

    <select id="selectByIds" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List" />
        from novel
        where id IN
        <foreach item="id" collection="list" open="(" separator="," close=")">
            #{id}
        </foreach>
    </select>

    <select id="selectAllNovelsForRanking" resultMap="BaseResultMap">
        SELECT <include refid="Base_Column_List" /> FROM novel WHERE status = 2
    </select>

    <select id="selectAuthorsByUuids" resultType="com.yushan.backend.dto.AuthorResponseDTO">
        SELECT u.uuid,
               u.username,
               u.avatar_url as avatarUrl,
               COUNT(n.id) as novelNum,
               COALESCE(SUM(n.vote_cnt), 0) as totalVoteCnt,
               COALESCE(SUM(n.view_cnt), 0) as totalViewCnt
        FROM users u LEFT JOIN novel n ON u.uuid = n.author_id AND n.status = 2
        WHERE u.uuid IN
        <foreach item="uuid" collection="list" open="(" separator="," close=")">
            #{uuid, jdbcType=OTHER}
        </foreach>
        GROUP BY u.uuid, u.username, u.avatar_url
    </select>
</mapper>