<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.yushan.backend.dao.CommentMapper" >
    <resultMap id="BaseResultMap" type="com.yushan.backend.entity.Comment" >
        <constructor >
            <idArg column="id" jdbcType="INTEGER" javaType="java.lang.Integer" />
            <arg column="user_id" jdbcType="OTHER" javaType="java.util.UUID" />
            <arg column="chapter_id" jdbcType="INTEGER" javaType="java.lang.Integer" />
            <arg column="content" jdbcType="VARCHAR" javaType="java.lang.String" />
            <arg column="like_cnt" jdbcType="INTEGER" javaType="java.lang.Integer" />
            <arg column="is_spoiler" jdbcType="BIT" javaType="java.lang.Boolean" />
            <arg column="create_time" jdbcType="TIMESTAMP" javaType="java.util.Date" />
            <arg column="update_time" jdbcType="TIMESTAMP" javaType="java.util.Date" />
        </constructor>
    </resultMap>
    <sql id="Base_Column_List" >
        id, user_id, chapter_id, content, like_cnt, is_spoiler, create_time, update_time
    </sql>
    <!-- Basic CRUD Operations -->
    <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
        select
        <include refid="Base_Column_List" />
        from comment
        where id = #{id,jdbcType=INTEGER}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
        delete from comment
        where id = #{id,jdbcType=INTEGER}
    </delete>
    <insert id="insert" parameterType="com.yushan.backend.entity.Comment" >
        insert into comment (id, user_id, chapter_id,
        content, like_cnt, is_spoiler,
        create_time, update_time)
        values (#{id,jdbcType=INTEGER}, #{userId,jdbcType=OTHER}, #{chapterId,jdbcType=INTEGER},
        #{content,jdbcType=VARCHAR}, #{likeCnt,jdbcType=INTEGER}, #{isSpoiler,jdbcType=BIT},
        #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP})
    </insert>
    <insert id="insertSelective" parameterType="com.yushan.backend.entity.Comment" >
        insert into comment
        <trim prefix="(" suffix=")" suffixOverrides="," >
            <if test="id != null" >
                id,
            </if>
            <if test="userId != null" >
                user_id,
            </if>
            <if test="chapterId != null" >
                chapter_id,
            </if>
            <if test="content != null" >
                content,
            </if>
            <if test="likeCnt != null" >
                like_cnt,
            </if>
            <if test="isSpoiler != null" >
                is_spoiler,
            </if>
            <if test="createTime != null" >
                create_time,
            </if>
            <if test="updateTime != null" >
                update_time,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides="," >
            <if test="id != null" >
                #{id,jdbcType=INTEGER},
            </if>
            <if test="userId != null" >
                #{userId,jdbcType=OTHER},
            </if>
            <if test="chapterId != null" >
                #{chapterId,jdbcType=INTEGER},
            </if>
            <if test="content != null" >
                #{content,jdbcType=VARCHAR},
            </if>
            <if test="likeCnt != null" >
                #{likeCnt,jdbcType=INTEGER},
            </if>
            <if test="isSpoiler != null" >
                #{isSpoiler,jdbcType=BIT},
            </if>
            <if test="createTime != null" >
                #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="updateTime != null" >
                #{updateTime,jdbcType=TIMESTAMP},
            </if>
        </trim>
    </insert>
    <update id="updateByPrimaryKeySelective" parameterType="com.yushan.backend.entity.Comment" >
        update comment
        <set >
            <if test="userId != null" >
                user_id = #{userId,jdbcType=OTHER},
            </if>
            <if test="chapterId != null" >
                chapter_id = #{chapterId,jdbcType=INTEGER},
            </if>
            <if test="content != null" >
                content = #{content,jdbcType=VARCHAR},
            </if>
            <if test="likeCnt != null" >
                like_cnt = #{likeCnt,jdbcType=INTEGER},
            </if>
            <if test="isSpoiler != null" >
                is_spoiler = #{isSpoiler,jdbcType=BIT},
            </if>
            <if test="createTime != null" >
                create_time = #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="updateTime != null" >
                update_time = #{updateTime,jdbcType=TIMESTAMP},
            </if>
        </set>
        where id = #{id,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.yushan.backend.entity.Comment" >
        update comment
        set user_id = #{userId,jdbcType=OTHER},
        chapter_id = #{chapterId,jdbcType=INTEGER},
        content = #{content,jdbcType=VARCHAR},
        like_cnt = #{likeCnt,jdbcType=INTEGER},
        is_spoiler = #{isSpoiler,jdbcType=BIT},
        create_time = #{createTime,jdbcType=TIMESTAMP},
        update_time = #{updateTime,jdbcType=TIMESTAMP}
        where id = #{id,jdbcType=INTEGER}
    </update>
    <!-- Custom Select Queries -->
    <!-- Select comments by chapter ID with ordering -->
    <select id="selectByChapterId" resultMap="BaseResultMap" parameterType="java.lang.Integer">
        select
        <include refid="Base_Column_List" />
        from comment
        where chapter_id = #{chapterId,jdbcType=INTEGER}
        order by create_time desc
    </select>
    <!-- Select comments by user ID -->
    <select id="selectByUserId" resultMap="BaseResultMap" parameterType="java.util.UUID">
        select
        <include refid="Base_Column_List" />
        from comment
        where user_id = #{userId,jdbcType=OTHER}
        order by create_time desc
    </select>
    <!-- Select comments by novel ID (through chapter join) -->
    <select id="selectByNovelId" resultMap="BaseResultMap" parameterType="java.lang.Integer">
        select
        c.id, c.user_id, c.chapter_id, c.content, c.like_cnt, c.is_spoiler, c.create_time, c.update_time
        from comment c
        inner join chapter ch on c.chapter_id = ch.id
        where ch.novel_id = #{novelId,jdbcType=INTEGER}
        order by c.create_time desc
    </select>
    <!-- Select comments with pagination and filtering -->
    <select id="selectCommentsWithPagination" resultMap="BaseResultMap" parameterType="com.yushan.backend.dto.CommentSearchRequestDTO">
        select
        <include refid="Base_Column_List" />
        from comment
        <where>
            <if test="chapterId != null">
                and chapter_id = #{chapterId,jdbcType=INTEGER}
            </if>
            <if test="userId != null">
                and user_id = #{userId,jdbcType=OTHER}
            </if>
            <if test="isSpoiler != null">
                and is_spoiler = #{isSpoiler,jdbcType=BIT}
            </if>
            <if test="search != null and search != ''">
                and content like concat('%', #{search}, '%')
            </if>
        </where>
        <choose>
            <when test="sort != null and sort == 'likeCnt'">
                order by like_cnt ${order}
            </when>
            <otherwise>
                order by create_time ${order}
            </otherwise>
        </choose>
        limit #{size} offset #{page} * #{size}
    </select>
    <!-- Select comments by novel with pagination -->
    <select id="selectCommentsByNovelWithPagination" resultMap="BaseResultMap">
        select
        c.id, c.user_id, c.chapter_id, c.content, c.like_cnt, c.is_spoiler, c.create_time, c.update_time
        from comment c
        inner join chapter ch on c.chapter_id = ch.id
        where ch.novel_id = #{novelId,jdbcType=INTEGER}
        <if test="isSpoiler != null">
            and c.is_spoiler = #{isSpoiler,jdbcType=BIT}
        </if>
        <if test="search != null and search != ''">
            and c.content like concat('%', #{search}, '%')
        </if>
        <choose>
            <when test="sort != null and sort == 'likeCnt'">
                order by c.like_cnt ${order}
            </when>
            <otherwise>
                order by c.create_time ${order}
            </otherwise>
        </choose>
        limit #{size} offset #{page} * #{size}
    </select>
    <!-- Count Queries -->
    <select id="countComments" resultType="long" parameterType="com.yushan.backend.dto.CommentSearchRequestDTO">
        select count(*)
        from comment
        <where>
            <if test="chapterId != null">
                and chapter_id = #{chapterId,jdbcType=INTEGER}
            </if>
            <if test="userId != null">
                and user_id = #{userId,jdbcType=OTHER}
            </if>
            <if test="isSpoiler != null">
                and is_spoiler = #{isSpoiler,jdbcType=BIT}
            </if>
            <if test="search != null and search != ''">
                and content like concat('%', #{search}, '%')
            </if>
        </where>
    </select>
    <select id="countByChapterId" resultType="long" parameterType="java.lang.Integer">
        select count(*)
        from comment
        where chapter_id = #{chapterId,jdbcType=INTEGER}
    </select>
    <select id="countByNovelId" resultType="long" parameterType="java.lang.Integer">
        select count(*)
        from comment c
        inner join chapter ch on c.chapter_id = ch.id
        where ch.novel_id = #{novelId,jdbcType=INTEGER}
    </select>
    <select id="countCommentsByNovel" resultType="long">
        select count(*)
        from comment c
        inner join chapter ch on c.chapter_id = ch.id
        where ch.novel_id = #{novelId,jdbcType=INTEGER}
        <if test="isSpoiler != null">
            and c.is_spoiler = #{isSpoiler,jdbcType=BIT}
        </if>
        <if test="search != null and search != ''">
            and c.content like concat('%', #{search}, '%')
        </if>
    </select>
    <!-- Update like count (increment or decrement) -->
    <update id="updateLikeCount">
        update comment
        set like_cnt = like_cnt + #{increment,jdbcType=INTEGER}
        where id = #{id,jdbcType=INTEGER}
    </update>
    <!-- Check if user has already commented on a chapter -->
    <select id="existsByUserAndChapter" resultType="boolean">
        select count(*) > 0
        from comment
        where user_id = #{userId,jdbcType=OTHER} and chapter_id = #{chapterId,jdbcType=INTEGER}
    </select>
</mapper>