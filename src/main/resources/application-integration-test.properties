# =============================================================================
# INTEGRATION TEST PROFILE CONFIGURATION
# =============================================================================
# This profile is specifically designed for INTEGRATION TESTS only.
# 
# STRATEGY: Use Testcontainers for real database testing
# - Integration Tests: Real Postgres + Redis, slower, more realistic
# - Unit Tests: H2 in-memory, fast, isolated
#
# WHY Testcontainers for Integration Tests?
# - 🎯 Realism: Test with real Postgres + Redis
# - 🔄 Consistency: Same environment as production
# - 🧪 Comprehensive: Test database interactions, transactions
# - 🚀 CI/CD: Docker containers in GitHub Actions
#
# WHY NOT H2 for Integration Tests?
# - ⚠️ Differences: H2 vs Postgres behavior
# - 🎯 Limited: Can't test Postgres-specific features
# - 🔄 Inconsistency: Different from production
# =============================================================================

# Enable Testcontainers for integration tests
spring.testcontainers.enabled=true

# Testcontainers will automatically configure:
# - spring.datasource.url (Postgres container)
# - spring.data.redis.host (Redis container)
# - spring.data.redis.port (Redis container)

# JPA/Hibernate Configuration
spring.jpa.hibernate.ddl-auto=create-drop
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.show-sql=false

# Redis Configuration (will be overridden by Testcontainers)
spring.data.redis.repositories.enabled=true
spring.session.store-type=redis
spring.cache.type=redis

# Logging for integration tests
logging.level.com.yushan.backend=DEBUG
logging.level.org.springframework.testcontainers=INFO
logging.level.org.testcontainers=INFO

# =============================================================================
# NOTE: Testcontainers will automatically:
# 1. Start Postgres container
# 2. Start Redis container  
# 3. Configure Spring to use these containers
# 4. Clean up containers after tests
# =============================================================================

# Session configuration for integration tests
# Use Redis-backed sessions and avoid JDBC schema initialization to prevent
# accidental connections to the default datasource before Testcontainers wires it.
spring.session.store-type=redis
spring.session.jdbc.initialize-schema=never
