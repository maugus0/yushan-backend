name: Yushan Backend CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
    types: [opened, synchronize, reopened]

# Avoid overlapping runs
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  checks: write
  pull-requests: write
  security-events: write

jobs:
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    permissions:
      contents: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        cache: maven
        
    - name: Run Unit Tests
      run: ./mvnw test -Dspring.profiles.active=test

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    permissions:
      contents: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        cache: maven
        
    - name: Run Integration Tests
      run: ./mvnw test -Dspring.profiles.active=integration-test

  lint-quality:
    name: Lint & Quality Checks
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    permissions:
      contents: read
      security-events: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        cache: maven
        
    - name: Run SpotBugs (static analysis)
      run: ./mvnw spotbugs:spotbugs
      
    - name: Run Checkstyle (code style)
      run: ./mvnw checkstyle:check
      
    - name: Generate SpotBugs SARIF
      run: ./mvnw spotbugs:spotbugs -Dspotbugs.outputFormat=sarif -Dspotbugs.outputFile=spotbugs.sarif
      
    - name: Upload SpotBugs SARIF to GitHub
      if: always() && hashFiles('spotbugs.sarif') != ''
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: spotbugs.sarif
        
    - name: Run Unit Tests and generate JaCoCo coverage
      run: ./mvnw -B -Dspring.profiles.active=test test jacoco:report
      
    - name: Run SonarCloud Analysis (use compiled classes and JaCoCo report)
      run: |
        ./mvnw -B sonar:sonar \
          -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml \
          -Dsonar.java.binaries=target/classes
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    permissions:
      contents: read
      security-events: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        cache: maven
        
    - name: Cache OWASP Dependency-Check data
      uses: actions/cache@v4
      with:
        path: ~/.m2/repository/org/owasp/dependency-check-data
        key: ${{ runner.os }}-dc-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-dc-
        
    - name: Run OWASP Dependency Check
      env:
        NVD_API_KEY: ${{ secrets.NVD_API_KEY }}
      run: ./mvnw -Dnvd.api.key="${NVD_API_KEY}" org.owasp:dependency-check-maven:check
      
    - name: Upload Dependency-Check SARIF
      if: always() && hashFiles('target/dependency-check-report.sarif') != ''
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: target/dependency-check-report.sarif
      
    - name: Upload OWASP Report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: owasp-dependency-check-report
        path: |
          target/dependency-check-report.html
          target/dependency-check-report.xml
        
    - name: Build (skip tests)
      run: ./mvnw -B -DskipTests package
      
    - name: Setup Snyk CLI
      uses: snyk/actions/setup@master
      
    - name: Snyk test (export SARIF)
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      run: |
        snyk auth "$SNYK_TOKEN"
        snyk test \
          --file=pom.xml \
          --package-manager=maven \
          --project-name=${{ github.repository }} \
          --severity-threshold=high \
          --sarif --sarif-file-output=snyk.sarif
      
    - name: Upload Snyk result to GitHub Code Scanning
      if: always() && hashFiles('snyk.sarif') != ''
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: snyk.sarif

  docker-build:
    name: Build Docker Image & Scan Vulnerabilities
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, lint-quality, security-scan]
    permissions:
      contents: read
      packages: write
      security-events: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha
          type=raw,value=${{ github.sha }}
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ghcr.io/${{ github.repository }}:${{ steps.meta.outputs.version }}
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always() && hashFiles('trivy-results.sarif') != ''
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Upload Trivy SARIF as artifact
      uses: actions/upload-artifact@v4
      if: always() && hashFiles('trivy-results.sarif') != ''
      with:
        name: trivy-sarif
        path: trivy-results.sarif

  # TODO: Uncomment when ready to deploy
  # staging-deploy:
  #   name: Deploy to Staging
  #   runs-on: ubuntu-latest
  #   needs: [unit-tests, integration-tests, lint-quality, security-scan, docker-build]
  #   environment: yushan-staging
  #   if: github.ref == 'refs/heads/main'
  #   permissions:
  #     contents: read
  #     packages: read
  #     deployments: write
  #   
  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v4
  #     
  #   # Install official Railway CLI (non-interactive, reads token from env)
  #   - name: Install Railway CLI
  #     run: curl -fsSL https://railway.app/install.sh | sh
  #
  #   # Set environment variables for staging service on each deploy
  #   - name: Set staging variables on Railway
  #     env:
  #       RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
  #     run: |
  #       railway variables set \
  #         SPRING_DATASOURCE_URL='${{ secrets.STAGING_DATABASE_URL }}' \
  #         SPRING_DATA_REDIS_URL='${{ secrets.STAGING_REDIS_URL }}' \
  #         --project ${{ secrets.RAILWAY_PROJECT_ID }} \
  #         --service yushan-be-staging
  #
  #   # Deploy image built/pushed in previous job
  #   - name: Deploy image to Railway
  #     env:
  #       RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
  #     run: |
  #       IMAGE="ghcr.io/${{ github.repository }}:${{ github.ref_name }}"
  #       railway deploy --image "$IMAGE" \
  #         --project ${{ secrets.RAILWAY_PROJECT_ID }} \
  #         --service yushan-be-staging
  #
  #   # Smoke test: poll /actuator/health until UP
  #   - name: Health Check
  #     env:
  #       STAGING_URL: ${{ secrets.STAGING_URL }}
  #     run: |
  #       echo "Smoke test $STAGING_URL/actuator/health"
  #       for i in {1..30}; do
  #         if curl -fsS "$STAGING_URL/actuator/health" | grep -q '"status":"UP"'; then
  #           echo "Health OK"; exit 0
  #         fi
  #         sleep 5
  #       done
  #       echo "Health check FAILED"; exit 1
  #       
  #   # ZAP baseline scan against fixed staging URL
  #   - name: OWASP ZAP Baseline (staging)
  #     if: always()
  #     env:
  #       STAGING_URL: ${{ secrets.STAGING_URL }}
  #     run: |
  #       docker run --rm -v $(pwd):/zap/wrk -t ghcr.io/zaproxy/zaproxy:stable \
  #         zap-baseline.py -t "$STAGING_URL" \
  #         -J zap.json -w zap.md -r zap.html -a
  #
  #   - name: Upload ZAP report
  #     if: always()
  #     uses: actions/upload-artifact@v4
  #     with:
  #       name: zap-staging
  #       path: |
  #         zap.html
  #         zap.json
  #         zap.md

  generate-reports:
    name: Generate CI Summary & Collect Reports
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, lint-quality, security-scan, docker-build]
    permissions:
      contents: read
      checks: write
      security-events: write
    steps:
    - name: Download OWASP report
      uses: actions/download-artifact@v4
      if: always()
      with:
        name: owasp-dependency-check-report
        path: reports/owasp

    - name: Download Trivy SARIF
      uses: actions/download-artifact@v4
      if: always()
      with:
        name: trivy-sarif
        path: reports/trivy

    - name: Create CI summary
      if: always()
      run: |
        {
          echo "# Yushan Backend – CI Reports";
          echo "- Commit: $GITHUB_SHA";
          echo "- Branch: ${GITHUB_REF##*/}";
          echo "";
          echo "## Artifacts";
          if [ -f reports/owasp/dependency-check-report.html ]; then echo "- OWASP Dependency-Check: reports/owasp/dependency-check-report.html"; fi
          if [ -f reports/trivy/trivy-results.sarif ]; then echo "- Trivy SARIF: reports/trivy/trivy-results.sarif"; fi
        } > summary.md

    - name: Upload consolidated report bundle
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: ci-reports
        path: |
          summary.md
          reports/**